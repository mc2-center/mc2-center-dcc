"""
process_arachne_mapping.py

Takes an input CSV of metadata and JSON formatted mapping, generated by the 
arachne agent, as input. 

Returns a TSV file of General Commons metadata, built based on input CSV and
the mapping JSON.

author: orion.banks
"""

import argparse
import json
import pandas as pd
import os

def get_args():
	"""Set up command-line interface and get arguments."""
	parser = argparse.ArgumentParser()
	parser.add_argument(
        "-m",
		"--mapping",
        type=str,
        help="Path to mapping file generated by the arachne agent",
        required=True
    )
    
	return parser.parse_args()

# Define the mapping configuration
def build_mapping_config(mapping_file: str) -> dict:
	"""
    Reads a mapping JSON file from the arachne agent.
    Returns a dictionary of the parsed mapping configuration.
    """
	with open(mapping_file, 'r') as mapping_json:
		mapping = json.load(mapping_json)

	return mapping

def transform_csv_to_tsv(mapping_config):
	source_file = mapping_config["source_file"]
	for target in mapping_config["targets"]:
		output_file = target["output_file"].replace(".csv", ".tsv")
		mappings = target["mappings"]
		
		# Read the input CSV file
		df = pd.read_csv(source_file)
		
		# Prepare the output DataFrame
		transformed_df = pd.DataFrame()
		
		for mapping in mappings:
			try:
				source_col = mapping["source"]
			except KeyError:
				print(f"'source' key not found in mapping {mapping}. Assuming this will be a constant or empty.")
				source_col = None
			target_col = mapping["target"]
			
			if "value" in mapping:
				if mapping["value"] is not None:
					if "map" in mapping["value"]:
						value_map = mapping["value"]["map"]
						transformed_df[target_col] = df[source_col].map(value_map).fillna("")
					else:
						constant_value = mapping["value"]
						transformed_df[target_col] = [constant_value] * df.shape[0]
				else:
					transformed_df[target_col] = None
			else:
				transformed_df[target_col] = df[source_col].fillna("")

		# Save the transformed DataFrame to TSV
		try:
			os.makedirs(os.path.dirname(output_file), exist_ok=True)
		except FileNotFoundError:
			os.makedirs("mappings", exist_ok=True)
			output_file = "/".join(["mappings", output_file])
		transformed_df.to_csv(output_file, sep='\t', index=False)
		print(f"Transformed file saved to {output_file}")

# Run the transformation
def main():
    
	args = get_args()
    
	mapping_config = build_mapping_config(args.mapping)
    
	transform_csv_to_tsv(mapping_config)
    
if __name__ == "__main__":
	main()
