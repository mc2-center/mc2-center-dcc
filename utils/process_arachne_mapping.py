"""
process_arachne_mapping.py

Takes an input CSV of metadata and JSON formatted mapping, generated by the 
arachne agent, as input. 

Returns a TSV file of General Commons metadata, built based on input CSV and
the mapping JSON.

author: orion.banks
"""

import pandas as pd
import os

# Define the mapping configuration
mapping_config = {
    "source_file": "input_1/sample.csv",
    "targets": [
        {
            "output_file": "gdc_sample.csv",
            "mappings": [
                {"target": "type", "source": "type"},
                {"target": "sample_id", "source": "sample_id"},
                {"target": "sample_description", "source": "sample_description"},
                {"target": "sample_tumor_status", "source": "sample_tumor_status"},
                {"target": "sample_anatomic_site", "source": "anatomic_site"},
                {"target": "sample_age_at_collection", "source": "participant_age_at_collection"},
                {
                    "target": "sample_type_category",
                    "source": "tumor_classification",
                    "value": {
                        "map": {
                            "Primary": "Primary Tumor",
                            "Metastatic": "Metastatic Tumor"
                        }
                    }
                },
                {"target": "participant.study_participant_id", "source": "participant.participant_id"}
            ]
        }
    ]
}

def transform_csv_to_tsv(mapping_config):
    source_file = mapping_config["source_file"]
    for target in mapping_config["targets"]:
        output_file = target["output_file"].replace(".csv", ".tsv")
        mappings = target["mappings"]

        # Read the input CSV file
        df = pd.read_csv(source_file)

        # Prepare the output DataFrame
        transformed_df = pd.DataFrame()

        for mapping in mappings:
            source_col = mapping["source"]
            target_col = mapping["target"]

            if "value" in mapping and "map" in mapping["value"]:
                value_map = mapping["value"]["map"]
                transformed_df[target_col] = df[source_col].map(value_map).fillna(df[source_col])
            else:
                transformed_df[target_col] = df[source_col]

        # Save the transformed DataFrame to TSV
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        transformed_df.to_csv(output_file, sep='\t', index=False)
        print(f"Transformed file saved to {output_file}")

# Run the transformation
transform_csv_to_tsv(mapping_config)
